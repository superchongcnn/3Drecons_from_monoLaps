# Function to triangulate points
def triangulate_points(R1, t1, R2, t2, K, pts1, pts2):
    P1 = np.hstack((R1, t1))
    P2 = np.hstack((R2, t2))
    P1 = K @ P1
    P2 = K @ P2

    points_4d = cv2.triangulatePoints(P1, P2, pts1.T, pts2.T)
    points_3d = points_4d[:3, :] / points_4d[3, :]
    return points_3d.T

# Generate 3D points
points_3d = []

for i in range(len(matches)):
    good_matches = get_good_matches(matches[i])
    src_pts = np.float32([keypoints[i][m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
    dst_pts = np.float32([keypoints[i + 1][m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

    pts_3d = triangulate_points(np.eye(3), np.zeros((3, 1)), Rs[i], ts[i], K, src_pts, dst_pts)
    points_3d.extend(pts_3d)
