# 5. 3D reconstruction
# src/reconstruction.py

import cv2
import numpy as np
import open3d as o3d

class Reconstructor:
    def __init__(self, config):
        self.config = config

    def triangulate_points(self, K, R1, t1, R2, t2, kp1, kp2, matches):
        """Triangulate 3D points from two views"""
        # Create projection matrices
        P1 = K @ np.hstack((R1, t1))
        P2 = K @ np.hstack((R2, t2))

        # Get matched points
        pts1 = np.float32([kp1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)
        pts2 = np.float32([kp2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)

        # Triangulate points
        points_4d = cv2.triangulatePoints(P1, P2, pts1.T, pts2.T)
        points_3d = points_4d[:3, :] / points_4d[3, :]

        return points_3d.T

    def create_point_cloud(self, points_3d, colors=None):
        """Create Open3D point cloud from 3D points"""
        pcd = o3d.geometry.PointCloud()
        pcd.points = o3d.utility.Vector3dVector(points_3d)
        if colors is not None:
            pcd.colors = o3d.utility.Vector3dVector(colors)
        
        # Estimate normals
        pcd.estimate_normals()
        return pcd

    def surface_reconstruction(self, pcd):
        """Perform surface reconstruction using Poisson reconstruction"""
        mesh, densities = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(pcd, depth=9)
        return mesh
